// Autogenerated from Pigeon (v9.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ViewMessage (
  val viewId: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ViewMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      return ViewMessage(viewId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LoadMessage (
  val viewId: Long,
  val url: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): LoadMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val url = list[1] as String
      return LoadMessage(viewId, url)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
      url,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AutoQualityModeMessage (
  val viewId: Long,
  val autoQualityMode: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AutoQualityModeMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val autoQualityMode = list[1] as Boolean?
      return AutoQualityModeMessage(viewId, autoQualityMode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
      autoQualityMode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LoopingMessage (
  val viewId: Long,
  val looping: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): LoopingMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val looping = list[1] as Boolean?
      return LoopingMessage(viewId, looping)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
      looping,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MutedMessage (
  val viewId: Long,
  val muted: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MutedMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val muted = list[1] as Boolean?
      return MutedMessage(viewId, muted)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
      muted,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FQualityMessage (
  val viewId: Long,
  val quality: FQuality? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FQualityMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val quality: FQuality? = (list[1] as List<Any?>?)?.let {
        FQuality.fromList(it)
      }
      return FQualityMessage(viewId, quality)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
      quality?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlaybackRateMessage (
  val viewId: Long,
  val playbackRate: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PlaybackRateMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val playbackRate = list[1] as Double?
      return PlaybackRateMessage(viewId, playbackRate)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
      playbackRate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SeekMessage (
  val viewId: Long,
  val seconds: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SeekMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val seconds = list[1] as Double
      return SeekMessage(viewId, seconds)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
      seconds,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class VolumeMessage (
  val viewId: Long,
  val volume: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): VolumeMessage {
      val viewId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val volume = list[1] as Double?
      return VolumeMessage(viewId, volume)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      viewId,
      volume,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FQuality (
  val name: String,
  val height: Long,
  val width: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FQuality {
      val name = list[0] as String
      val height = list[1].let { if (it is Int) it.toLong() else it as Long }
      val width = list[2].let { if (it is Int) it.toLong() else it as Long }
      return FQuality(name, height, width)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      height,
      width,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object IvsPlayerApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AutoQualityModeMessage.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FQuality.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FQualityMessage.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LoadMessage.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LoopingMessage.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MutedMessage.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlaybackRateMessage.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SeekMessage.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ViewMessage.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VolumeMessage.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AutoQualityModeMessage -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is FQuality -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is FQualityMessage -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is LoadMessage -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is LoopingMessage -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is MutedMessage -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PlaybackRateMessage -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is SeekMessage -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is ViewMessage -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is VolumeMessage -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface IvsPlayerApi {
  fun autoQualityMode(mode: AutoQualityModeMessage): Boolean
  fun looping(loopingMessage: LoopingMessage): Boolean
  fun mute(mutedMessage: MutedMessage): Boolean
  fun playbackRate(playbackRateMessage: PlaybackRateMessage): Double
  fun volume(volumeMessage: VolumeMessage): Double
  fun videoDuration(viewMessage: ViewMessage): Double
  fun playbackPosition(viewMessage: ViewMessage): Double
  fun qualities(viewMessage: ViewMessage): List<FQuality>
  fun quality(qualityMessage: FQualityMessage): FQuality
  fun pause(viewMessage: ViewMessage)
  fun load(loadMessage: LoadMessage)
  fun play(viewMessage: ViewMessage)
  fun seekTo(seekMessage: SeekMessage)
  fun dispose(viewMessage: ViewMessage)

  companion object {
    /** The codec used by IvsPlayerApi. */
    val codec: MessageCodec<Any?> by lazy {
      IvsPlayerApiCodec
    }
    /** Sets up an instance of `IvsPlayerApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: IvsPlayerApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.autoQualityMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modeArg = args[0] as AutoQualityModeMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.autoQualityMode(modeArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.looping", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val loopingMessageArg = args[0] as LoopingMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.looping(loopingMessageArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.mute", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val mutedMessageArg = args[0] as MutedMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mute(mutedMessageArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.playbackRate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playbackRateMessageArg = args[0] as PlaybackRateMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.playbackRate(playbackRateMessageArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.volume", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val volumeMessageArg = args[0] as VolumeMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.volume(volumeMessageArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.videoDuration", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val viewMessageArg = args[0] as ViewMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.videoDuration(viewMessageArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.playbackPosition", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val viewMessageArg = args[0] as ViewMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.playbackPosition(viewMessageArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.qualities", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val viewMessageArg = args[0] as ViewMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.qualities(viewMessageArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.quality", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val qualityMessageArg = args[0] as FQualityMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.quality(qualityMessageArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.pause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val viewMessageArg = args[0] as ViewMessage
            var wrapped: List<Any?>
            try {
              api.pause(viewMessageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.load", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val loadMessageArg = args[0] as LoadMessage
            var wrapped: List<Any?>
            try {
              api.load(loadMessageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.play", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val viewMessageArg = args[0] as ViewMessage
            var wrapped: List<Any?>
            try {
              api.play(viewMessageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.seekTo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val seekMessageArg = args[0] as SeekMessage
            var wrapped: List<Any?>
            try {
              api.seekTo(seekMessageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IvsPlayerApi.dispose", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val viewMessageArg = args[0] as ViewMessage
            var wrapped: List<Any?>
            try {
              api.dispose(viewMessageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
